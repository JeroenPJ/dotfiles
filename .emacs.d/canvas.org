#+BIND: org-export-use-babel nil
#+TITLE: Canvas
#+AUTHOR: Paul Lodder
#+EMAIL: <paul_lodder@live.nl>
#+DATE: March 7, 2020
#+LATEX: \setlength\parindent{0pt}
#+LaTeX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage[margin=0.8in]{geometry}
#+LATEX_HEADER_EXTRA:  \usepackage{mdframed}
#+LATEX_HEADER_EXTRA: \BeforeBeginEnvironment{minted}{\begin{mdframed}}
#+LATEX_HEADER_EXTRA: \AfterEndEnvironment{minted}{\end{mdframed}}
#+MACRO: NEWLINE @@latex:\\@@ @@html:<br>@@
#+PROPERTY: header-args :exports both :session insurer :cache :results value
#+OPTIONS: ^:nil
#+LATEX_COMPILER: pdflatexorg-mode restarted
* Getting started
#+BEGIN_SRC emacs-lisp
(setq coco-id 10928)
(load-org "org-lms/org-lms.org")
(add-to-list 'load-path "/home/paul/.emacs.d/org-lms" )
(use-package request)
(setq org-lms-baseurl "https://canvas.uva.nl")
(setq org-lms-token "10392~NaXOUkaQVhXk1FtNyWamdOtWAZpb79FUZdH36Qg2Xw6ACaEe39wvvtiijqpiJCiG")
(require 'org-lms)
#+END_SRC

#+RESULTS:
: org-lms

* Utils
** json-find
The org-lms request does not seem to parse the returned json properly, so let's
write a function that does this.
#+BEGIN_SRC emacs-lisp
(defun org-lms--json-find (keys json)
  (if (= (length keys) 0)
      json
    (let* (
           (rel-key (first keys))
           (rel-ind (cl-position rel-key json))
           )
      (cond ((eq : (first keys)) (org-lms--json-find (rest keys) (first json) ))
            ((null rel-ind) (error (format "Key: %s not found" (first keys))))
            ((= (length keys) 1) (elt json (+ 1 rel-ind)))
            (t (org-lms--json-find  (rest keys) (elt json (+ 1 rel-ind)))))
      ))
  )

(defun org-lms--get-features-json-list (keys json-list)
  "Return seq with keys extracted from each element in json-list"
  (seq-map (lambda (json-el) (org-lms--json-find keys json-el))
           json-list)
  )
#+END_SRC

#+RESULTS:
: org-lms--get-features-json-list

* canvas get courses
: org-lms--json-find
** Get-courses
#+BEGIN_SRC emacs-lisp
(defvar org-lms--courses-json nil
  "List of courses.
")


(defun org-lms--get-courses-json (active-only)
  (let ((course-list
         (if org-lms--courses-json
             org-lms--courses-json
           (let ((reloaded-list (org-lms-canvas-request "/api/v1/courses")))
                 (setq org-lms--courses-json reloaded-list)
             reloaded-list))))
    (if active-only
        (seq-filter
         (lambda (json) (null (org-lms--json-find '(:end_at) json)))
         course-list)
      course-list)))

;; (defun org-lms--get-courses-info (keys)


;; (seq-map (lambda (course-json) (org-lms--json-find keys course-json))
;;            (org-lms--get-courses-json)))
))

    ;; (let* ((json (org-lms--course-json))
    ;;      (course-names (seq-map (lambda (course-json)
    ;;                               (org-lms--json-find '(:name) course-json)) json)))
    ;; course-names))
  ;; (
;; (defun convert-to-assoc (seqs)
;;   (

;;     )


;; (use-package org-lms
;;   :load-path "/home/paul/src/org-lms"
;;   :pin manual
;;   :after (org password-store ts dash let-alist)
;;   :commands (org-lms-setup org-lms-get-courseid)
;;   :config
;;   ;; nothing yet
;;   )
;; (setq canvas-token "10392~NaXOUkaQVhXk1FtNyWamdOtWAZpb79FUZdH36Qg2Xw6ACaEe39wvvtiijqpiJCiG")
;; (defun canvas--request (endpoint request
#+END_SRC

#+RESULTS:
: org-lms--get-courses-json
** Files
#+BEGIN_SRC emacs-lisp
(defun org-lms--get-files-for-course (course-id)
    "Either '(courses course-id) or '(users user-id)"
    (org-lms-canvas-request
     (concat (format "/api/v1/courses/%s/files" course-id) "?per_page=100")))



(defvar course-name2file-dir '()
  "Add entries that map course-name to path where files should be stored")

(push '("Computational Complexity" "/home/paul/courses/s2/coco/files/") course-name2file-dir)
(defun org-lms--file-dir (course-name)
  (let ((file-dir (cadr (assoc course-name course-name2file-dir))))
    (if (null file-dir)
        (let ((file-dir
               (read-file-name
                (format "No directory for %s has been specified, choose where the files should be downloaded: "
                        course-name ))))
          file-dir
          )
      file-dir
      )
    ))


;;         (push (list course-name dir-name)
;;         ()
;; (if (null

(defun download-from-url (url path)
(message "HA")
  (unless
      (if (file-exists-p path)
          (not (yes-or-no-p (format "'%s?' already exists, overwrite " path)))
        nil
        )
    (url-copy-file url path)
    ))

(defun canvas-get-file ()
  (interactive)
  (let* (
         (courses-json (org-lms--get-courses-json t))
         (courses2id (zip (org-lms--get-features-json-list '(:name) courses-json)
                          (org-lms--get-features-json-list '(:id) courses-json)))
         (course-name (completing-read "Select course: "  courses2id))
         (course-id (cdr (assoc course-name courses2id)))
         (files-json (org-lms--get-files-for-course course-id))
         (file-names2url (zip
                          (org-lms--get-features-json-list '(:filename) files-json)
                          (org-lms--get-features-json-list '(:url) files-json)))
         (files-to-download (completing-read-multiple
                             "Select file to download: " file-names2url))
         (urls-to-download (progn
                             (message (format "%s" files-to-download))
                             (seq-map (lambda (file-name)
                                        (cdr (assoc file-name file-names2url)))
                                      files-to-download)))
         (file-dir (progn
                     (message (format "%s" urls-to-download))
                    (org-lms--file-dir course-name)))
         (full-paths (seq-map
                      (lambda (file-name) (string-join (list file-dir file-name)))
                      files-to-download
                      ))
         (url2full-path (zip full-paths urls-to-download))
         )
    ;; "AA"
    (seq-map (lambda (url-full-path) (cl-destructuring-bind
                                         (url path)
                                         url-full-path
                                       (download-from-url url path)))
             url2full-path
             )
    )
    )
#+END_SRC

#+RESULTS:
: download-from-url
