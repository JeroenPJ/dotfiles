* packages to look up

look up (py) documentation:
https://stackoverflow.com/questions/45992859/how-to-read-python-documentation-in-emacs
code nav: helm
save window configs/workspaces: eyebrowse

* basic emacs

disable that big old yellow triangle in the center of the screen:

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

#+RESULTS:

be able to dynamically create functions:

#+BEGIN_SRC emacs-lisp
(defun define-named-lambda (name lambd args)
  (defalias (intern name) `(lambda () (interactive) (apply ,lambd ',args))))

(defun define-custom-function (name func)
  (define-named-lambda name (lambda () (funcall func))))
#+END_SRC

#+RESULTS:
: define-custom-function

* ssh shortcuts

fns to reset directories to local:
#+BEGIN_SRC emacs-lisp
(defun local ()
  (interactive)
  (setq default-directory "/Users/jeroen"))

(defun reset-default-directory ()
  (interactive)
  (setq-local default-directory (file-name-directory (buffer-file-name))))

(defun open-shell-in-directory (directory &optional buffername)
  (interactive)
  (message "osid")
  (message directory)
  (message buffername)
  (with-temp-buffer
    (setq default-directory directory)
    (shell buffername)
    )
)
#+END_SRC

#+RESULTS:
: open-shell-in-directory

add remote endpoints

#+BEGIN_SRC emacs-lisp
(setq ssh-config '(
                   ("fxr" "/plink:jeroen@168.119.165.84:")
                   ("lisa-dl" "/plink:lgpu0348@lisa.surfsara.nl:")
                  ))

(dolist (elt ssh-config)
  (define-named-lambda
    (nth 0 elt)
    (lambda (directory)
      (interactive)
      (setq default-directory directory))
    '((nth 1 elt))
    )
  (define-named-lambda
    (s-concat "shell-" (nth 0 elt))
    (lambda (name directory)
      (interactive)
      (open-shell-in-directory directory (s-concat "*shell-" name "*")))
    elt
    )
)
#+END_SRC

#+RESULTS:

* better keybindings

copy/cut entire line if no region selected:
#+BEGIN_SRC emacs-lisp
(defun slick-cut (beg end)
  (interactive
   (if mark-active
       (list (region-beginning) (region-end))
     (message "Cut line")
     (list (line-beginning-position) (line-beginning-position 2)))))

(advice-add 'kill-region :before #'slick-cut)

(defun slick-copy (beg end)
  (interactive
   (if mark-active
       (list (region-beginning) (region-end))
     (message "Copied line")
     (list (line-beginning-position) (line-beginning-position 2)))))

(advice-add 'kill-ring-save :before #'slick-copy)
#+END_SRC

#+RESULTS:

move windows with arrow keys (i know...)

#+BEGIN_SRC emacs-lisp
(bind-key* "M-<left>"  'windmove-left)
(bind-key* "M-<right>" 'windmove-right)
(bind-key* "M-<up>"    'windmove-up)
(bind-key* "M-<down>"  'windmove-down)
#+END_SRC

#+RESULTS:
: windmove-down

switch buffer with =C-j=:

#+BEGIN_SRC emacs-lisp
(bind-key* "C-j" 'ivy-switch-buffer)
#+END_SRC

#+RESULTS:
: ivy-switch-buffer

* dired

#+BEGIN_SRC emacs-lisp
  (require 'dired-x)

  (setq dired-omit-files
        (concat dired-omit-files
                "\\|"
                (regexp-orrify "\\.orgx$"
                               "^\.DS_Store$"
                               "^__MACOSX$"
                               "\\.pyc$"
                               "\\.pyo$"
                               "^__pycache__"
                               ".ipynb_checkpoints"
                               "\\.lprof$"
                               "\\.bak$"
                               "^ltximg$"
                               "^\\.~lock\\."
                               "^!.*pdf$"
                               "\\.~.*#")))

  (add-hook 'dired-mode-hook
            #'(lambda ()
                (setq dired-guess-shell-alist-user
                      '(("\\.e?ps$" "gv" "lpr")
                        ("\\.pdf$" "mupdf" "xpdf" "lp" "acroread")
                        ("\\.mobi$" "ebook-viewer")
                        ("\\.epub$" "ebook-viewer")
                        ("\\.djvu$" "ebook-viewer")
                        ("\\.csv$" "loffice" "gnumeric")
                        ("\\.docx?$" "loffice")
                        ("\\.xlsx?$" "loffice" "gnumeric")
                        ("\\.pptx?$" "loffice")
                        ("\\.od[spt]$" "loffice")
                        ("\\.divx$" "mplayer")
                        ("\\.flv$" "mplayer")
                        ("\\.avi$" "mplayer")
                        ("\\.mpg$" "mplayer")
                        ("\\.mp4$" "mplayer")
                        ("\\.wmv$" "mplayer")
                        ("\\.mkv$" "mplayer")
                        ("\\.mov$" "mplayer")
                        ("\\.webm$" "mplayer")
                        ("Flash......$" "mplayer")
                        ("mplay......$" "mplayer")
                        ("\\.p[bgpn]m$" "geeqie" "display")
                        ("\\.gif$" "geeqie" "display")
                        ("\\.tif$" "geeqie" "display")
                        ("\\.png$" "geeqie" "display")
                        ("\\.jpe?g$" "geeqie" "display")
                        ("\\.svg$" "geeqie" "display")
                        ("\\.e?ps.g?z$" "gunzip -qc * | gv -"
                         (concat
                          "gunzip"
                          (if dired-guess-shell-gzip-quiet " -q")))
                        ("\\.e?ps.Z$" "zcat * | gv -"
                         (concat "znew"
                                 (if dired-guess-shell-gzip-quiet " -q")
                                 " " dired-guess-shell-znew-switches))
                        ("viewapp.asp" "xpdf"))
                      dired-listing-switches "-alh")
                (local-set-key "\C-c\C-zf" 'browse-url-of-dired-file)
                (dired-omit-mode)
                (whitespace-mode -1)))

    ;; Auto complete with ignore case
    (setq-default read-buffer-completion-ignore-case t)
    (setq-default read-file-name-completion-ignore-case t)
#+END_SRC

show filesize as kb, mb, etc:

#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alh")
#+END_SRC

* s (string manipulation)

#+BEGIN_SRC emacs-lisp
(require 's)
#+END_SRC

#+RESULTS:
: s

* a bunch of stuffs

add org elpa to package archive
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

#+RESULTS:
: ((melpa . http://melpa.org/packages/) (gnu . https://elpa.gnu.org/packages/) (melpa . https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/) (melpa . https://stable.melpa.org/packages/) (org . https://orgmode.org/elpa/))

enable org-mode auto-fill-mode and org-indent-mode automatically:

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'auto-fill-mode)
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC



#+BEGIN_SRC emacs-lisp
;; (defun move-line-up ()
;;   "Move up the current line."
;;   (interactive)
;;   (transpose-lines 1)
;;   (forward-line -2)
;;   (indent-according-to-mode))

;; (defun move-line-down ()
;;   "Move down the current line."
;;   (interactive)
;;   (forward-line 1)
;;   (transpose-lines 1)
;;   (forward-line -1)
;;   (indent-according-to-mode))

;; (global-set-key [(meta up)]  'move-line-up)
;; (global-set-key [(meta down)]  'move-line-down)

(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
(global-set-key (kbd "C-c C-d") 'duplicate-line)

;; drag-stuff


(defun emacs-gitignore  ()
  (interactive)
  (let ((fullpath (string-join (list default-directory ".gitignore"))))
    (if (file-exists-p fullpath)
        (progn
          (shell-command-to-string "curl 'https://raw.githubusercontent.com/github/gitignore/master/Global/Emacs.gitignore' >> .gitignore")
          (message (format "Added emacs-gitignore in %s" default-directory))))))

  ;; (yank)

  ;;     (shell-command-to-string "curl 'https://raw.githubusercontent.com/github/gitignore/master/Global/Emacs.gitignore' >> .gitignore")
  ;; (message (format "Added gitignore in %s" default-directory))
;; )
#+END_SRC

#+RESULTS:
| (lambda nil (yas-activate-extra-mode (quote fundamental-mode))) | yas-minor-mode-set-explicitly |

#+BEGIN_SRC emacs-lisp
;;  (require 'hydra)
;; (defhydra hydra-zoom (global-map "M")
;;   "zoom"
;;   ("g" text-scale-increase "in")
;;  ("l" text-scale-decrease "out"))
;; (drag-stuff-mode)
;; (defhydra hydra-zoom (global-map "<f2>")
;;   "zoom"
;;   ("g" text-scale-increase "in")
;;   ("l" text-scale-decrease "out"))
(define-key indent-rigidly-map (drag-stuff--kbd 'left) 'drag-stuff-left)
(define-key indent-rigidly-map (kbd "C-p") 'drag-stuff-up)
(define-key indent-rigidly-map (kbd "C-n") 'drag-stuff-down)
(define-key indent-rigidly-map (kbd "C-f") 'drag-stuff-right)
(define-key indent-rigidly-map (kbd "C-b") 'drag-stuff-left)
(drag-stuff-mode)
#+END_SRC

#+RESULTS:
: drag-stuff-left

* yasnippet

#+BEGIN_SRC emacs-lisp
;; (add-hook 'yas-minor-mode-hook (lambda () (yas-activate-extra-mode
;;           'fundamental-mode)))
;; (use-package yasnippet
;;   :config
;;   (yas-global-mode 1))

;; (add-hook 'yas-minor-mode-hook
;;           (lambda ()
;;             (yas-activate-extra-mode 'fundamental-mode)))
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC

#+RESULTS:
: t

* multiple-cursors
#+BEGIN_SRC emacs-lisp
(bind-keys* ((kbd "C-.") . mc/mark-next-like-this)
            ((kbd "C-,") . mc/mark-previous-like-this)
            ((kbd "C-M-,") . mc/unmark-next-like-this)
            ((kbd "C-M-.") . mc/unmark-previous-like-this)
             ((kbd "C-c C-,") . mc/mark-all-like-this))
#+END_SRC

#+RESULTS:
: mc/mark-all-like-this

* projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(projectile-mode +1)
#+END_SRC

#+RESULTS:
: t

* rails

** projectile-rails

projectile-rails is used for navigation inside a rails project.

#+BEGIN_SRC emacs-lisp
(use-package projectile-rails
  :ensure t)
(projectile-rails-global-mode)
(define-key projectile-rails-mode-map (kbd "C-c e") 'projectile-rails-command-map)
#+END_SRC

#+RESULTS:
: projectile-rails-command-map

** web-mode

web-mode ensures syntax highlighting for a bunch of web code files (html), including .html.erb

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
#+END_SRC

#+RESULTS:
: ((\.jsx?$ . web-mode) (\.djhtml\' . web-mode) (\.mustache\' . web-mode) (\.erb\' . web-mode) (\.as[cp]x\' . web-mode) (\.[agj]sp\' . web-mode) (\.tpl\.php\' . web-mode) (\.phtml\' . web-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.[jt]sx?\' . web-mode) (\.php\' . web-mode) (\.html\' . web-mode) (\.hbs\' . web-mode) (\.ejs\' . web-mode) (/Pipfile.lock$ . js2-mode) (/Pipfile$ . conf-mode) (\.xsh$ . python-mode) (\.ipynb$ . js2-mode) (\.py\' . python-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (/git-rebase-todo\' . git-rebase-mode) (\.ts\' . typescript-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))
* react

i use a number of packages here: first, web-mode, which does a bunch of stuff. initialization:

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode)) ;; auto-enable for .js/.jsx files
(setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))

(defun web-mode-init-hook ()
  "Hooks for Web mode.  Adjust indent."
  (setq web-mode-markup-indent-offset 2))

(add-hook 'web-mode-hook  'web-mode-init-hook)
#+END_SRC

#+RESULTS:

second package: prettier-js, which autoformats js files on save. for this, i also install
add-node-modules-path

#+BEGIN_SRC emacs-lisp
(setq prettier-js-args (list "--no-semi" "--single-quote"))

(defun web-mode-init-prettier-hook ()
  (add-node-modules-path)
  (prettier-js-mode))

(add-hook 'web-mode-hook  'web-mode-init-prettier-hook)
#+END_SRC

then, flymake-eslint, which does eslint:

#+BEGIN_SRC emacs-lisp
;; (defcustom flymake-eslint-executable-name "eslint"
;;   "Name of executable to run when checker is called.  Must be present in variable `exec-path'."
;;   :type 'string
;;   :group 'flymake-eslint)

;; (add-hook 'web-mode-hook
;;   (lambda ()
;;     (flymake-eslint-enable)))
#+END_SRC
* canvas-utils
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "~/code/paulodder/canvas-utils/")
;; (require 'canvas-utils)
;; (setq canvas-baseurl "https://canvas.uva.nl") ; url you visit to go to the
                                        ; canvas instance of your institution
                                        ; (e.g. https://canvas.uva.nl)
;; (setq canvas-token "10392~0HN7MJHY2C0MA2XcZlNvra3OScZR8crUs7xxbjT6yl6rb1YEPYYgb9yzlSgdTETW") ; when logged in generate an access
                                        ; token under Account > Settings
                                        ; > Approved integrations
#+END_SRC

#+RESULTS:
: 10392~0HN7MJHY2C0MA2XcZlNvra3OScZR8crUs7xxbjT6yl6rb1YEPYYgb9yzlSgdTETW
* tramp

make sure tramp works on windows:

#+BEGIN_SRC emacs-lisp
(when (eq window-system 'w32)
  (setq putty-directory "C:/Program Files/PuTTY")
  (setq tramp-default-method "plink")
  (when (and (not (string-match putty-directory (getenv "PATH")))
       (file-directory-p putty-directory))
    (setenv "PATH" (concat putty-directory ";" (getenv "PATH")))
    (add-to-list 'exec-path putty-directory)))
#+END_SRC

#+RESULTS:

* tramp-virtualenv

#+BEGIN_SRC emacs-lisp
(load-file "~/code/matthewlmcclure/tramp-virtualenv/tramp-virtualenv.el")
#+END_SRC

#+RESULTS:
: t
* keybase

run: =git clone https://github.com/paulodder/keybase-chat=

#+BEGIN_SRC emacs-lisp
(setq my-keybase-username "jpj8")
(add-to-list 'load-path "~/.emacs.d/keybase-chat/")
;; (add-to-list 'load-path "~/.emacs.d/zone-matrix")
;; (require 'zone-matrix)
(load-file "~/.emacs.d/keybase-chat/keybase-chat.el")
(load-file "~/.emacs.d/keybase-chat/keybase-markup.el")
(require 'keybase)
#+END_SRC

#+RESULTS:
: t

* avy
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-;") 'avy-goto-char-2)
#+END_SRC

#+RESULTS:
: avy-goto-char-2
* org-mode

Change the size of inline latex eqs (=C-x C-c C-l=).

#+BEGIN_SRC emacs-lisp
(plist-put org-format-latex-options :scale 1.8)
#+END_SRC

#+RESULTS:

In order to create those images when opening org file, insert this:
=#+STARTUP: latexpreview=.

** copy src block

#+BEGIN_SRC emacs-lisp
(defun org-copy-src-block ()
  (interactive)
  (org-edit-src-code)
  (mark-whole-buffer)
  (kill-ring-save)
  (org-edit-src-abort))

(define-key org-mode-map (kbd "C-M-w") 'org-copy-src-block))
#+END_SRC

#+RESULTS:
: org-copy-src-block

** edit random comments and strings with org-mode

If you wanna edit some large comment (e.g. docstring) using org-mode editing
ease, use this:

#+BEGIN_SRC emacs-lisp
(use-package poporg
      :bind (("C-c /" . poporg-dwim)))
#+END_SRC

#+RESULTS:
: poporg-dwim

** org to ipynb

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "~/.emacs.d/github/ox-ipynb")
;; (require 'ox-ipynb)
#+END_SRC

#+RESULTS:
: ox-ipynb
* shell
#+BEGIN_SRC emacs-lisp
(defun set-bash () (interactive) (setq explicit-shell-file-name "/bin/bash"))
(defun set-zsh () (interactive) (setq explicit-shell-file-name "/bin/zsh"))
#+END_SRC

#+RESULTS:
: set-zsh

* python
#+BEGIN_SRC emacs-lisp
;; (define-key dump-jump-mode-map (kbd "C-M-p") nil)
;; python-indent-dedent-line-backspace
      (use-package python
        :ensure t
        :mode ("\\.py\\'" . python-mode)
        :interpreter ("python" . python-mode)
        :config
        (setq python-shell-interpreter "ipython"
        ;; python-shell-interpreter-args "--simple-prompt -i --colors=Linux --profile=default")
          python-shell-interpreter-args "")
              (push '("\\.ipynb$" . js2-mode) auto-mode-alist)
        :hook
        (python-mode . (lambda ()
                         "No eldoc for remote files"
                         (let ((name (buffer-file-name)))
                           (when (and name
                                      (> (length name) 5)
                                      (string= "/ssh:" (substring name 0 5)))
                             (eldoc-mode -1))))))

  (setq py-shell-name "ipython")

              ;; python-shell-interpreter-args "--simple-prompt -i")
    ;; (defcustom py-shell-name
    ;;   (if (eq system-type 'windows-nt)
    ;;       "C:/Python27/python"
    ;;     ;; "python"
    ;;     "ipython")

    ;; ;;   "A PATH/TO/EXECUTABLE or default value `py-shell' may look for.

    ;; ;; If no shell is specified by command.

    ;; ;; On Windows default is C:/Python27/python
    ;; ;; --there is no garantee it exists, please check your system--

    ;; ;; Else python"
    ;; ;;   :type 'string
    ;; ;;   :tag "py-shell-name"
    ;; ;;   :group 'python-mode)
#+END_SRC

#+RESULTS:
: ipython

** blacken
use-package doesn't seem to work with blacken

#+BEGIN_SRC emacs-lisp
(require 'blacken)
(setq blacken-line-length 79)
(setq blacken-executable "/Users/jeroen/.virtualenvs/py3.8/bin/black")
(add-hook 'python-mode-hook 'blacken-mode 'too-long-lines-mode)

(define-advice org-edit-src-exit (:before (&rest _args) format-python)
  "Run `blacken-buffer' when leaving an org-mode Python source block."
  (when (eq major-mode 'python-mode)
    (blacken-buffer)))

;; (use-package blacken
;;   :ensure t
;;   :bind (:map python-mode-map ("C-c C-b" . blacken-buffer))
;;   :config
;;   (setq blacken-line-length 80)
;;   (add-hook 'python-mode-hook 'blacken-mode))
#+END_SRC

#+RESULTS:
: org-edit-src-exit@format-python

** python jedi (unused)
1. From emacs-jedi readme
#+BEGIN_SRC emacs-lisp
;; (setq jedi:server-command '("pip3" "/Users/jeroen/.emacs.d/.python-environments/default/bin/jediepcserver"))

#+END_SRC

#+RESULTS:

2. Then open Python file.
#+BEGIN_SRC emacs-lisp
;;; Python Jedi
;;; From emacs-jedi readme
;; Type:
;;     M-x jedi:install-server RET
;; Then open Python file.
;; (use-package jedi
;;   :ensure t
;;   ;; :disabled nil
;;   :defer 3
;;   :config
;;   ;; Standard Jedi.el setting
;;   (add-hook 'python-mode-hook 'jedi:setup)
;;   (setq jedi:complete-on-dot t))
#+END_SRC

#+RESULTS:

** elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :diminish elpy-mode
    :config (elpy-enable))

    ;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

    (custom-set-variables
     ;; sudo dnf install python-jedi python3-jedi -y
     ;; '(elpy-rpc-backend "jedi")
     '(help-at-pt-display-when-idle (quote (flymake-overlay)) nil (help-at-pt))
     '(help-at-pt-timer-delay 0.9)
     '(tab-width 2))

    ;; Do not highlight indentation
    ;; (delete 'elpy-module-highlight-indentation elpy-modules)
    ;; )
(setq elpy-eldoc-show-current-function nil)
#+END_SRC

#+RESULTS:

** xonsh
   #+BEGIN_SRC emacs-lisp
   (push '("\\.xsh$" . python-mode) auto-mode-alist)
   #+END_SRC

   #+RESULTS:
   : ((\.xsh$ . python-mode) (\.ipynb$ . js2-mode) (\.jsx?$ . web-mode) (\.djhtml\' . web-mode) (\.mustache\' . web-mode) (\.erb\' . web-mode) (\.as[cp]x\' . web-mode) (\.[agj]sp\' . web-mode) (\.tpl\.php\' . web-mode) (\.phtml\' . web-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.[jt]sx?\' . web-mode) (\.php\' . web-mode) (\.html\' . web-mode) (\.hbs\' . web-mode) (\.ejs\' . web-mode) (/Pipfile.lock$ . js2-mode) (/Pipfile$ . conf-mode) (\.xsh$ . python-mode) (\.ipynb$ . js2-mode) (\.py\' . python-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (/git-rebase-todo\' . git-rebase-mode) (\.ts\' . typescript-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** pipenv
   #+BEGIN_SRC emacs-lisp
     (push '("/Pipfile$" . conf-mode) auto-mode-alist)
     (push '("/Pipfile.lock$" . js2-mode) auto-mode-alist)
   #+END_SRC

   #+RESULTS:
   : ((/Pipfile.lock$ . js2-mode) (/Pipfile$ . conf-mode) (\.xsh$ . python-mode) (\.ipynb$ . js2-mode) (\.jsx?$ . web-mode) (\.djhtml\' . web-mode) (\.mustache\' . web-mode) (\.erb\' . web-mode) (\.as[cp]x\' . web-mode) (\.[agj]sp\' . web-mode) (\.tpl\.php\' . web-mode) (\.phtml\' . web-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.[jt]sx?\' . web-mode) (\.php\' . web-mode) (\.html\' . web-mode) (\.hbs\' . web-mode) (\.ejs\' . web-mode) (/Pipfile.lock$ . js2-mode) (/Pipfile$ . conf-mode) (\.xsh$ . python-mode) (\.ipynb$ . js2-mode) (\.py\' . python-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (/git-rebase-todo\' . git-rebase-mode) (\.ts\' . typescript-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** bug fix
#+BEGIN_SRC emacs-lisp
  ;; Fix Python loading bug in emacs25
  (with-eval-after-load 'python
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
            (python-shell-completion-native-output-timeout
             python-shell-completion-native-try-output-timeout))
        (python-shell-completion-native-get-completions
         (get-buffer-process (current-buffer))
         nil "_"))))
#+END_SRC

#+RESULTS:
: python-shell-completion-native-try

** unused
#+BEGIN_SRC emacs-lisp
  (setq
   ;; python-shell-interpreter "python"
   ;; python-shell-interpreter-args "--colors=Linux --profile=default"
   python-shell-interpreter-interactive-arg "--simple-prompt -i"
   python-shell-prompt-regexp "In \\[[0-9]+\\]: "
   python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
   python-shell-completion-setup-code
   "from IPython.core.completerlib import module_completion"
   python-shell-completion-module-string-code
   "';'.join(module_completion('''%s'''))\n"
   python-shell-completion-string-code
   "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
  ;; (setq python-shell-interpreter "ipython"
  ;;       python-shell-interpreter-args "--simple-prompt"
  ;;       py-python-command-args '("--matplotlib")
  ;;       python-shell-prompt-regexp "In \\[[0-9]+\\]: "
  ;;       python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
  ;;       python-shell-completion-setup-code
  ;;       "from IPython.core.completerlib import module_completion"
  ;;       python-shell-completion-module-string-code
  ;;       "';'.join(module_completion('''%s'''))\n"
  ;;       python-shell-completion-string-code
  ;;       "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"

  ;;       python-check-command "pylint"
  ;;       python-indent-offset 2
  ;;       py-autopep8-options '("--max-line-length=80")
  ;;       )

  ;; (add-hook 'python-mode-hook 'jedi:setup)
  ;; (setq jedi:complete-on-dot t)

#+END_SRC

#+RESULTS:
: ';'.join(get_ipython().Completer.all_completions('''%s'''))

** virtualenv
#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells) ;; if you want interactive shell support
    (venv-initialize-eshell)             ;; if you want eshell support
    ;; note that setting `venv-location` is not necessary if you
    ;; use the default location (`~/.virtualenvs`), or if the
    ;; the environment variable `WORKON_HOME` points to the right place
    (setq venv-location "~/.virtualenvs/"))


#+END_SRC

#+RESULTS:
: t

** info
#+BEGIN_SRC emacs-lisp
  (require 'info-look)

  (info-lookup-add-help
   :mode 'python-mode
   :regexp "[[:alnum:]_]+"
   :doc-spec '(("(python)Index" nil "")))
#+END_SRC

#+RESULTS:

** Inferior python mode
#+BEGIN_SRC emacs-lisp
  ;;     (load-file "/home/paul/.emacs.d/too-long-lines-mode/too-long-lines-mode.el")
  ;; (add-hook `inferior-python-mode-hook (too-long-lines-mode))

#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (define-key python-mode-map (kbd "DEL") nil)


#+END_SRC

#+RESULTS:
** conda envs
#+BEGIN_SRC emacs-lisp
(setenv "WORKON_HOME" "/usr/local/Caskroom/miniconda/base/envs")
#+END_SRC

#+RESULTS:
: /usr/local/Caskroom/miniconda/base/envs
** django
#+BEGIN_SRC emacs-lisp
;; (defun django-shell ()
;;   (interactive)
;;   (let ((python-shell-interpreter "python")
;;     (python-shell-interpreter-args "-i /home/paul/projects/plekje/api/manage.py shell_plus"))
;;     (run-python)))
;; # (setq python-shell-interpreter "python"
;; #       python-shell-interpreter-args "-i /home/paul/projects/plekje/api/manage.py shell_plus")
#+END_SRC

#+RESULTS:

** jupyter
Let's write a function that gets the token

#+begin_src emacs-lisp
(defun jupyter-insert-token ()
  (interactive)
  (let ((output (shell-command-to-string "jupyter notebook list")))
        (insert (first (split-string (second (split-string output "token=")) " " )))
))
#+end_src

#+RESULTS:
: jupyter-insert-token

#+begin_src emacs-lisp
(defun pip-venv-mode () (interactive)
(setq venv-location "~/.virtualenvs/"))

(defun conda-venv-mode () (interactive)
(setq venv-location "/usr/local/Caskroom/miniconda/base/envs"))
#+end_src

#+RESULTS:
: conda-venv-mode

** pygen

#+BEGIN_SRC emacs-lisp
(use-package pygen
  :ensure t)
(add-hook 'python-mode-hook 'pygen-mode)
#+END_SRC

#+RESULTS:

* theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-palenight t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC

#+RESULTS:
: t

* icicles

#+BEGIN_SRC emacs-lisp
;; (load "~/.emacs.d/icicles-install")
;; (customize-variable' "icicle-download-dir" "~/.emacs.d/icicles")


;; (add-to-list 'load-path "~/.emacs.d/icicles")
;; (require 'icicles)

;; (icy-mode 1)
#+END_SRC

#+RESULTS:

* highlight syntax errors in json
This requires =jsonlint=. Install with =npm install jsonlint -g=.

#+BEGIN_SRC emacs-lisp
(delete 'flycheck-disabled-checkers "json-jsonlist")
(use-package flycheck
  :ensure t)
(flycheck-add-mode 'json-jsonlint 'json-mode)
(add-hook 'json-mode-hook 'flycheck-mode)
#+END_SRC

#+RESULTS:

* inline math results

#+BEGIN_SRC emacs-lisp
(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(bind-key* "C-x M-e" 'eval-and-replace)
#+END_SRC

#+RESULTS:
: eval-and-replace

* ace-window

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t)
(global-set-key (kbd "M-o") 'ace-window)
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
(defvar aw-dispatch-alist
  '((?x aw-delete-window "Delete Window")
  (?m aw-swap-window "Swap Windows")
  (?M aw-move-window "Move Window")
  (?c aw-copy-window "Copy Window")
  (?j aw-switch-buffer-in-window "Select Buffer")
  (?n aw-flip-window)
  (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
  (?c aw-split-window-fair "Split Fair Window")
  (?v aw-split-window-vert "Split Vert Window")
  (?b aw-split-window-horz "Split Horz Window")
  (?o delete-other-windows "Delete Other Windows")
  (?? aw-show-dispatch-help))
  "List of actions for `aw-dispatch-default'.")
#+END_SRC

#+RESULTS:
: aw-dispatch-alist

* emacs-dashboard
the =dashboard= package changes the splash screen into something useful.

enable it:
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-items '((recents . 6)
                            (projects . 8)))
    (setq dashboard-banner-logo-title "jpjmacs")
    (setq dashboard-startup-banner "~/.emacs.d/araki_banner.png")
    (setq dashboard-set-navigator t)
    (setq dashboard-set-footer nil)
    (setq dashboard-navigator-buttons
      `(;; line1
        (
         (nil "shell-fxr" "open shell on fxr" (lambda (&rest _) (shell-fxr)))
         (nil "shell-lisa" "open shell on lisa-dl" (lambda (&rest _) (shell-lisa-dl)))
        )
       )
      )
    )
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

#+RESULTS:
: t

* protesilaos

this guy has an amazing =.emacs.d= setup: https://protesilaos.com/dotemacs/.
here are things i copied / adapted from him.

** focus mode (centered editing)

olivetti provides that centered buffer:

#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :ensure t
  :diminish
  :config
  (setq olivetti-body-width 0.7)
  (setq olivetti-minimum-body-width 100)
  (setq olivetti-recall-visual-line-mode-entry-state t))

(defun focus ()
  (interactive)
  (delete-other-windows)
  (olivetti-mode))

(defun defocus ()
  (interactive)
  (olivetti-mode))
#+END_SRC

#+RESULTS:
: defocus

* random utils

** copy org block as ans block

#+BEGIN_SRC emacs-lisp
(defun org-copy-section-as-tex ()
  (interactive)
  (save-excursion
    (call-interactively 'org-previous-visible-heading)
    (call-interactively 'org-mark-element)
    (next-line)
    (tex2ans (buffer-substring (region-beginning)
                               (region-end)))))

(defun tex2ans (s)
  (let ((tmp-file (make-temp-file "ans_" nil nil s)))
    (kill-new (shell-command-to-string (format "~/.virtualenvs/py3.8/bin/python ~/.emacs.d/scripts/latex2ans.py %s"
                                               tmp-file))
              nil)))

(define-key org-mode-map (kbd "C-c C-8") 'org-copy-section-as-tex)
#+END_SRC

#+RESULTS:
: org-copy-section-as-tex
* windows os
run bash on windows:

#+BEGIN_SRC emacs-lisp
(defun shell-on-windows ()
  (let ((explicit-shell-file-name "C:/Windows/System32/bash.exe"))
    (shell)))
#+END_SRC
